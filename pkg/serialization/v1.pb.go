// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.20.3
// source: v1.proto

package serialization

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Controls how we arrive at the final probability from all the buckets at a level
type LevelSquashingFunction int32

const (
	LevelSquashingFunction_LEVEL_SQUASHING_FUNCTION_MIN  LevelSquashingFunction = 0
	LevelSquashingFunction_LEVEL_SQUASHING_FUNCTION_MEAN LevelSquashingFunction = 1
)

// Enum value maps for LevelSquashingFunction.
var (
	LevelSquashingFunction_name = map[int32]string{
		0: "LEVEL_SQUASHING_FUNCTION_MIN",
		1: "LEVEL_SQUASHING_FUNCTION_MEAN",
	}
	LevelSquashingFunction_value = map[string]int32{
		"LEVEL_SQUASHING_FUNCTION_MIN":  0,
		"LEVEL_SQUASHING_FUNCTION_MEAN": 1,
	}
)

func (x LevelSquashingFunction) Enum() *LevelSquashingFunction {
	p := new(LevelSquashingFunction)
	*p = x
	return p
}

func (x LevelSquashingFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LevelSquashingFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_proto_enumTypes[0].Descriptor()
}

func (LevelSquashingFunction) Type() protoreflect.EnumType {
	return &file_v1_proto_enumTypes[0]
}

func (x LevelSquashingFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LevelSquashingFunction.Descriptor instead.
func (LevelSquashingFunction) EnumDescriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{0}
}

type Algorithm int32

const (
	Algorithm_MURMURHASH_32 Algorithm = 0
)

// Enum value maps for Algorithm.
var (
	Algorithm_name = map[int32]string{
		0: "MURMURHASH_32",
	}
	Algorithm_value = map[string]int32{
		"MURMURHASH_32": 0,
	}
)

func (x Algorithm) Enum() *Algorithm {
	p := new(Algorithm)
	*p = x
	return p
}

func (x Algorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Algorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_proto_enumTypes[1].Descriptor()
}

func (Algorithm) Type() protoreflect.EnumType {
	return &file_v1_proto_enumTypes[1]
}

func (x Algorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Algorithm.Descriptor instead.
func (Algorithm) EnumDescriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{1}
}

// TrackerCfg contains all the configurations related to a tracker
type TrackerCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique ID per tracker config
	TrackerId string `protobuf:"bytes,1,opt,name=tracker_id,json=trackerId,proto3" json:"tracker_id,omitempty"`
	// Version the tracker config
	ConfigVersion uint64 `protobuf:"varint,2,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	// Number of buckets per level
	M uint32 `protobuf:"varint,3,opt,name=m,proto3" json:"m,omitempty"`
	// Number of levels per tracker
	L uint32 `protobuf:"varint,4,opt,name=l,proto3" json:"l,omitempty"`
	// Increment probability used on failed requests
	Pi float64 `protobuf:"fixed64,5,opt,name=pi,proto3" json:"pi,omitempty"`
	// Decrement probability used on successfull requests
	Pd float64 `protobuf:"fixed64,6,opt,name=pd,proto3" json:"pd,omitempty"`
	// Deacy rate for bucket proabilities
	Lambda float64 `protobuf:"fixed64,7,opt,name=lambda,proto3" json:"lambda,omitempty"`
	// Controls how often the internal structures are rotated
	RotationFrequency *durationpb.Duration `protobuf:"bytes,8,opt,name=rotation_frequency,json=rotationFrequency,proto3" json:"rotation_frequency,omitempty"`
	// Controls the logic for arriving at the final probability from all the buckets at a level
	LevelSquashFn LevelSquashingFunction `protobuf:"varint,9,opt,name=level_squash_fn,json=levelSquashFn,proto3,enum=fair.data.v1.LevelSquashingFunction" json:"level_squash_fn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackerCfg) Reset() {
	*x = TrackerCfg{}
	mi := &file_v1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackerCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackerCfg) ProtoMessage() {}

func (x *TrackerCfg) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackerCfg.ProtoReflect.Descriptor instead.
func (*TrackerCfg) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{0}
}

func (x *TrackerCfg) GetTrackerId() string {
	if x != nil {
		return x.TrackerId
	}
	return ""
}

func (x *TrackerCfg) GetConfigVersion() uint64 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *TrackerCfg) GetM() uint32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *TrackerCfg) GetL() uint32 {
	if x != nil {
		return x.L
	}
	return 0
}

func (x *TrackerCfg) GetPi() float64 {
	if x != nil {
		return x.Pi
	}
	return 0
}

func (x *TrackerCfg) GetPd() float64 {
	if x != nil {
		return x.Pd
	}
	return 0
}

func (x *TrackerCfg) GetLambda() float64 {
	if x != nil {
		return x.Lambda
	}
	return 0
}

func (x *TrackerCfg) GetRotationFrequency() *durationpb.Duration {
	if x != nil {
		return x.RotationFrequency
	}
	return nil
}

func (x *TrackerCfg) GetLevelSquashFn() LevelSquashingFunction {
	if x != nil {
		return x.LevelSquashFn
	}
	return LevelSquashingFunction_LEVEL_SQUASHING_FUNCTION_MIN
}

// Bucket holds the proability and the last update time
type Bucket struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Probability       float64                `protobuf:"fixed64,1,opt,name=probability,proto3" json:"probability,omitempty"`
	LastUpdatedTimeMs uint64                 `protobuf:"varint,2,opt,name=last_updated_time_ms,json=lastUpdatedTimeMs,proto3" json:"last_updated_time_ms,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Bucket) Reset() {
	*x = Bucket{}
	mi := &file_v1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket) ProtoMessage() {}

func (x *Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket.ProtoReflect.Descriptor instead.
func (*Bucket) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{1}
}

func (x *Bucket) GetProbability() float64 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *Bucket) GetLastUpdatedTimeMs() uint64 {
	if x != nil {
		return x.LastUpdatedTimeMs
	}
	return 0
}

// Each level holds an array of Buckets (M Buckets)
type Level struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Buckets       []*Bucket              `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Level) Reset() {
	*x = Level{}
	mi := &file_v1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Level) ProtoMessage() {}

func (x *Level) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Level.ProtoReflect.Descriptor instead.
func (*Level) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{2}
}

func (x *Level) GetBuckets() []*Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

// FairData holds the tracking data containing multiple levels (L levels)
type FairData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Levels        []*Level               `protobuf:"bytes,1,rep,name=levels,proto3" json:"levels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FairData) Reset() {
	*x = FairData{}
	mi := &file_v1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FairData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FairData) ProtoMessage() {}

func (x *FairData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FairData.ProtoReflect.Descriptor instead.
func (*FairData) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{3}
}

func (x *FairData) GetLevels() []*Level {
	if x != nil {
		return x.Levels
	}
	return nil
}

// AlgoParams holds the choice of Algorithm and the relevant parameters
type AlgoParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     Algorithm              `protobuf:"varint,1,opt,name=algorithm,proto3,enum=fair.data.v1.Algorithm" json:"algorithm,omitempty"`
	MurmurSeed    uint32                 `protobuf:"varint,2,opt,name=murmur_seed,json=murmurSeed,proto3" json:"murmur_seed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgoParams) Reset() {
	*x = AlgoParams{}
	mi := &file_v1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoParams) ProtoMessage() {}

func (x *AlgoParams) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoParams.ProtoReflect.Descriptor instead.
func (*AlgoParams) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{4}
}

func (x *AlgoParams) GetAlgorithm() Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return Algorithm_MURMURHASH_32
}

func (x *AlgoParams) GetMurmurSeed() uint32 {
	if x != nil {
		return x.MurmurSeed
	}
	return 0
}

// FairRunParameters contains the runtime params with the instance of Fair
type FairRunParameters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AlgoParams    *AlgoParams            `protobuf:"bytes,1,opt,name=algo_params,json=algoParams,proto3" json:"algo_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FairRunParameters) Reset() {
	*x = FairRunParameters{}
	mi := &file_v1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FairRunParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FairRunParameters) ProtoMessage() {}

func (x *FairRunParameters) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FairRunParameters.ProtoReflect.Descriptor instead.
func (*FairRunParameters) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{5}
}

func (x *FairRunParameters) GetAlgoParams() *AlgoParams {
	if x != nil {
		return x.AlgoParams
	}
	return nil
}

// Metadata to uniquely identify a host
type HostMeta struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	HostGuid       string                 `protobuf:"bytes,1,opt,name=host_guid,json=hostGuid,proto3" json:"host_guid,omitempty"`
	SerializedAtMs uint64                 `protobuf:"varint,2,opt,name=serialized_at_ms,json=serializedAtMs,proto3" json:"serialized_at_ms,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HostMeta) Reset() {
	*x = HostMeta{}
	mi := &file_v1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMeta) ProtoMessage() {}

func (x *HostMeta) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMeta.ProtoReflect.Descriptor instead.
func (*HostMeta) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{6}
}

func (x *HostMeta) GetHostGuid() string {
	if x != nil {
		return x.HostGuid
	}
	return ""
}

func (x *HostMeta) GetSerializedAtMs() uint64 {
	if x != nil {
		return x.SerializedAtMs
	}
	return 0
}

// Holds the parameters and the associated data
type FairRuntimeData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Runtime       *FairRunParameters     `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Data          *FairData              `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FairRuntimeData) Reset() {
	*x = FairRuntimeData{}
	mi := &file_v1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FairRuntimeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FairRuntimeData) ProtoMessage() {}

func (x *FairRuntimeData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FairRuntimeData.ProtoReflect.Descriptor instead.
func (*FairRuntimeData) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{7}
}

func (x *FairRuntimeData) GetRuntime() *FairRunParameters {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *FairRuntimeData) GetData() *FairData {
	if x != nil {
		return x.Data
	}
	return nil
}

// FairStruct - wraps up the config, parameters and the data associated with a Fair Tracker
type FairStruct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cfg           *TrackerCfg            `protobuf:"bytes,1,opt,name=cfg,proto3" json:"cfg,omitempty"`
	Data          *FairRuntimeData       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Meta          *HostMeta              `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FairStruct) Reset() {
	*x = FairStruct{}
	mi := &file_v1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FairStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FairStruct) ProtoMessage() {}

func (x *FairStruct) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FairStruct.ProtoReflect.Descriptor instead.
func (*FairStruct) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{8}
}

func (x *FairStruct) GetCfg() *TrackerCfg {
	if x != nil {
		return x.Cfg
	}
	return nil
}

func (x *FairStruct) GetData() *FairRuntimeData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FairStruct) GetMeta() *HostMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

var File_v1_proto protoreflect.FileDescriptor

const file_v1_proto_rawDesc = "" +
	"\n" +
	"\bv1.proto\x12\ffair.data.v1\x1a\x1egoogle/protobuf/duration.proto\"\xbe\x02\n" +
	"\n" +
	"TrackerCfg\x12\x1d\n" +
	"\n" +
	"tracker_id\x18\x01 \x01(\tR\ttrackerId\x12%\n" +
	"\x0econfig_version\x18\x02 \x01(\x04R\rconfigVersion\x12\f\n" +
	"\x01m\x18\x03 \x01(\rR\x01m\x12\f\n" +
	"\x01l\x18\x04 \x01(\rR\x01l\x12\x0e\n" +
	"\x02pi\x18\x05 \x01(\x01R\x02pi\x12\x0e\n" +
	"\x02pd\x18\x06 \x01(\x01R\x02pd\x12\x16\n" +
	"\x06lambda\x18\a \x01(\x01R\x06lambda\x12H\n" +
	"\x12rotation_frequency\x18\b \x01(\v2\x19.google.protobuf.DurationR\x11rotationFrequency\x12L\n" +
	"\x0flevel_squash_fn\x18\t \x01(\x0e2$.fair.data.v1.LevelSquashingFunctionR\rlevelSquashFn\"[\n" +
	"\x06Bucket\x12 \n" +
	"\vprobability\x18\x01 \x01(\x01R\vprobability\x12/\n" +
	"\x14last_updated_time_ms\x18\x02 \x01(\x04R\x11lastUpdatedTimeMs\"7\n" +
	"\x05Level\x12.\n" +
	"\abuckets\x18\x01 \x03(\v2\x14.fair.data.v1.BucketR\abuckets\"7\n" +
	"\bFairData\x12+\n" +
	"\x06levels\x18\x01 \x03(\v2\x13.fair.data.v1.LevelR\x06levels\"d\n" +
	"\n" +
	"AlgoParams\x125\n" +
	"\talgorithm\x18\x01 \x01(\x0e2\x17.fair.data.v1.AlgorithmR\talgorithm\x12\x1f\n" +
	"\vmurmur_seed\x18\x02 \x01(\rR\n" +
	"murmurSeed\"N\n" +
	"\x11FairRunParameters\x129\n" +
	"\valgo_params\x18\x01 \x01(\v2\x18.fair.data.v1.AlgoParamsR\n" +
	"algoParams\"Q\n" +
	"\bHostMeta\x12\x1b\n" +
	"\thost_guid\x18\x01 \x01(\tR\bhostGuid\x12(\n" +
	"\x10serialized_at_ms\x18\x02 \x01(\x04R\x0eserializedAtMs\"x\n" +
	"\x0fFairRuntimeData\x129\n" +
	"\aruntime\x18\x01 \x01(\v2\x1f.fair.data.v1.FairRunParametersR\aruntime\x12*\n" +
	"\x04data\x18\x02 \x01(\v2\x16.fair.data.v1.FairDataR\x04data\"\x97\x01\n" +
	"\n" +
	"FairStruct\x12*\n" +
	"\x03cfg\x18\x01 \x01(\v2\x18.fair.data.v1.TrackerCfgR\x03cfg\x121\n" +
	"\x04data\x18\x02 \x01(\v2\x1d.fair.data.v1.FairRuntimeDataR\x04data\x12*\n" +
	"\x04meta\x18\x03 \x01(\v2\x16.fair.data.v1.HostMetaR\x04meta*]\n" +
	"\x16LevelSquashingFunction\x12 \n" +
	"\x1cLEVEL_SQUASHING_FUNCTION_MIN\x10\x00\x12!\n" +
	"\x1dLEVEL_SQUASHING_FUNCTION_MEAN\x10\x01*\x1e\n" +
	"\tAlgorithm\x12\x11\n" +
	"\rMURMURHASH_32\x10\x00B,Z*github.com/satmihir/fair/pkg/serializationb\x06proto3"

var (
	file_v1_proto_rawDescOnce sync.Once
	file_v1_proto_rawDescData []byte
)

func file_v1_proto_rawDescGZIP() []byte {
	file_v1_proto_rawDescOnce.Do(func() {
		file_v1_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_proto_rawDesc), len(file_v1_proto_rawDesc)))
	})
	return file_v1_proto_rawDescData
}

var file_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_v1_proto_goTypes = []any{
	(LevelSquashingFunction)(0), // 0: fair.data.v1.LevelSquashingFunction
	(Algorithm)(0),              // 1: fair.data.v1.Algorithm
	(*TrackerCfg)(nil),          // 2: fair.data.v1.TrackerCfg
	(*Bucket)(nil),              // 3: fair.data.v1.Bucket
	(*Level)(nil),               // 4: fair.data.v1.Level
	(*FairData)(nil),            // 5: fair.data.v1.FairData
	(*AlgoParams)(nil),          // 6: fair.data.v1.AlgoParams
	(*FairRunParameters)(nil),   // 7: fair.data.v1.FairRunParameters
	(*HostMeta)(nil),            // 8: fair.data.v1.HostMeta
	(*FairRuntimeData)(nil),     // 9: fair.data.v1.FairRuntimeData
	(*FairStruct)(nil),          // 10: fair.data.v1.FairStruct
	(*durationpb.Duration)(nil), // 11: google.protobuf.Duration
}
var file_v1_proto_depIdxs = []int32{
	11, // 0: fair.data.v1.TrackerCfg.rotation_frequency:type_name -> google.protobuf.Duration
	0,  // 1: fair.data.v1.TrackerCfg.level_squash_fn:type_name -> fair.data.v1.LevelSquashingFunction
	3,  // 2: fair.data.v1.Level.buckets:type_name -> fair.data.v1.Bucket
	4,  // 3: fair.data.v1.FairData.levels:type_name -> fair.data.v1.Level
	1,  // 4: fair.data.v1.AlgoParams.algorithm:type_name -> fair.data.v1.Algorithm
	6,  // 5: fair.data.v1.FairRunParameters.algo_params:type_name -> fair.data.v1.AlgoParams
	7,  // 6: fair.data.v1.FairRuntimeData.runtime:type_name -> fair.data.v1.FairRunParameters
	5,  // 7: fair.data.v1.FairRuntimeData.data:type_name -> fair.data.v1.FairData
	2,  // 8: fair.data.v1.FairStruct.cfg:type_name -> fair.data.v1.TrackerCfg
	9,  // 9: fair.data.v1.FairStruct.data:type_name -> fair.data.v1.FairRuntimeData
	8,  // 10: fair.data.v1.FairStruct.meta:type_name -> fair.data.v1.HostMeta
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_v1_proto_init() }
func file_v1_proto_init() {
	if File_v1_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_proto_rawDesc), len(file_v1_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_proto_goTypes,
		DependencyIndexes: file_v1_proto_depIdxs,
		EnumInfos:         file_v1_proto_enumTypes,
		MessageInfos:      file_v1_proto_msgTypes,
	}.Build()
	File_v1_proto = out.File
	file_v1_proto_goTypes = nil
	file_v1_proto_depIdxs = nil
}
